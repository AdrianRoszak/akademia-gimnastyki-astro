---
import Container from '../../components/atoms/Container.astro'
import Layout from '../../layouts/Layout.astro'

import Heading from '../../components/molecules/Heading.astro'
import {
  type RegistrationPage,
  getRegistrationPage,
} from '../../data/get-registration-page'
import { getRegistrationSlugs } from '../../data/get-registration-slugs'

export async function getStaticPaths() {
  async function obtainRegistrationSlugs() {
    const slugs = await getRegistrationSlugs()

    type Slug = {
      registration_item_slug: {
        current: string
      }
    }

    return slugs.map((slug: Slug) => {
      return {
        params: {
          slug: slug.registration_item_slug.current,
        },
      }
    })
  }

  const slugs = await obtainRegistrationSlugs()

  return [...slugs]
}

const { slug } = Astro.params
const { code, name } = (await getRegistrationPage(slug)) as RegistrationPage
---

<Layout title="zapisy" description='Zapisy'>
<main>
  <section>
    <Container>
      <div class="wrapper">
        <Heading as="h1" text={name} size='xl' />
        <div set:html={code} />
    </Container>
  </section>
</main>
</Layout>

<style>
  .wrapper {
    padding-top: 14rem;
    width: clamp(0px, 100%, 800px);
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
</style>

<!-- <script>
  window.addEventListener('load', () => {
    const observeScriptLoad = () => {
    const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.tagName === 'SCRIPT') {
            const submitButton = document.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.classList.add('weirdo-button--color-accent-2');
              submitButton.style.border = 'none';
              submitButton.style.marginTop = '1rem';

            node.onerror = () => {
              console.error(`Failed to load script: ${node.src}`);
            };
          }
        }
        });
      }
    });
  });

  observer.observe(document.body, { childList: true, subtree: true });
};

// Start observing
observeScriptLoad();

  })
</script> -->